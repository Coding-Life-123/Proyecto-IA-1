function toggleMenu() {
  const menu = document.getElementById("dropdownMenu");
  const button = document.querySelector(".menu-button");

  menu.classList.toggle("show");
  button.classList.toggle("active");
}

function selectPersona(persona) {
  showCustomAlert(
    "info",
    "üë§ Persona Seleccionada",
    "Has seleccionado: " +
      persona +
      "\n\nEsta persona ahora puede usar el chat."
  );
  toggleMenu(); // Cierra el men√∫ despu√©s de seleccionar
}

// Cerrar men√∫ al hacer clic fuera
document.addEventListener("click", function (event) {
  const menu = document.getElementById("dropdownMenu");
  const button = document.querySelector(".menu-button");

  if (!menu.contains(event.target) && !button.contains(event.target)) {
    menu.classList.remove("show");
    button.classList.remove("active");
  }
});

const socket = new WebSocket("ws://localhost:4000");

function iniciarChat() {
  // Aqu√≠ ir√° la l√≥gica para iniciar el chat
  showCustomAlert(
    "success",
    "üöÄ Chat Iniciado",
    "¬°Iniciando chat autom√°tico!\n\nEl chat se iniciar√° en breve..."
  );

  //conexi√≥n al servidor (hecha por el back-end porque el del front-end est√° viendo anime y anuncios de blacked)
  const listaEjemplo = [
  "¬°A ver, patr√≥n, con esa pinta de 'yo pongo y yo quito'! ¬øNo le da pena c√≥mo tienen este pa√≠s vuelto mierda? ¬°Paracos hijueputas!"
  ]
  const listaEjemplo2 = [
    "¬°A ver, patr√≥n, con esa pinta de 'yo pongo y yo quito'! ¬øNo le da pena c√≥mo tienen este pa√≠s vuelto mierda? ¬°Paracos hijueputas!",
    '¬°Pena da usted, marica! Con Uribe √©ramos una berraquera, no este mierdero de vagos que nos trajo su hijueputa de Petro, ¬°comunista de mierda!'
  ]

  //ejemplos de como aparecen los textos, en cada actualizaci√≥n el siguiente mensaje queda √∫ltimo, lo mejor para recorrerlos es un console.log(listaEjemplo2[listaEjemplo2.length-1]), de esta forma siempre muestra el √∫ltimo objeto, lo guarda en una variable y ya lo puede poner en el texto, y llevar una variable booleana de control que al ser false muestre textos de el petrista y al ser true textos del uribista

  socket.onmessage = (event) =>{
    const data = JSON.parse(event.data);
    console.log("Conversaci√≥n actualizada:", data);
  }
}

async function reiniciarChat() {
  // Aqu√≠ ir√° la l√≥gica para reiniciar el chat
  const confirmed = await customConfirm(
    "¬øEst√°s seguro de que quieres reiniciar el chat?\n\nSe perder√° el historial actual."
  );
  if (confirmed) {
    showCustomAlert(
      "success",
      "üîÑ Chat Reiniciado",
      "Chat reiniciado exitosamente!\n\nPuedes comenzar una nueva conversaci√≥n."
    );
  }
}

function irAEntrada() {
  // Funci√≥n para ir a la p√°gina de bienvenida
  window.location.href = "../Bienvenida/Index.html";
}

// Custom Alert Functions
function showCustomAlert(type, title, message) {
  const alertContainer = document.getElementById("customAlertContainer");
  const alert = document.getElementById("customAlert");
  const alertIcon = document.getElementById("alertIcon");
  const alertTitle = document.getElementById("alertTitle");
  const alertMessage = document.getElementById("alertMessage");

  // Set content
  alertTitle.textContent = title;
  alertMessage.textContent = message;

  // Set icon and type
  switch (type) {
    case "success":
      alertIcon.textContent = "‚úÖ";
      alert.className = "custom-alert alert-success";
      break;
    case "info":
      alertIcon.textContent = "‚ÑπÔ∏è";
      alert.className = "custom-alert alert-info";
      break;
    case "warning":
      alertIcon.textContent = "‚ö†Ô∏è";
      alert.className = "custom-alert alert-warning";
      break;
    case "error":
      alertIcon.textContent = "‚ùå";
      alert.className = "custom-alert alert-error";
      break;
    default:
      alertIcon.textContent = "üë§";
      alert.className = "custom-alert alert-info";
  }

  // Show alert
  alertContainer.style.display = "flex";
  setTimeout(() => {
    alert.classList.add("show");
  }, 10);
}

function closeCustomAlert() {
  const alertContainer = document.getElementById("customAlertContainer");
  const alert = document.getElementById("customAlert");

  alert.classList.remove("show");
  setTimeout(() => {
    alertContainer.style.display = "none";
  }, 300);
}

// Custom confirm function
function customConfirm(message) {
  return new Promise((resolve) => {
    showCustomAlert("warning", "Confirmaci√≥n", message);

    // Add confirm buttons temporarily
    const alertContent = document.querySelector(".alert-content");
    const existingButtons = alertContent.querySelector(".alert-buttons");
    if (existingButtons) {
      existingButtons.remove();
    }

    const buttonsDiv = document.createElement("div");
    buttonsDiv.className = "alert-buttons";
    buttonsDiv.innerHTML = `
            <button class="btn btn-primary" onclick="handleConfirm(true)">Aceptar</button>
            <button class="btn btn-secondary" onclick="handleConfirm(false)">Cancelar</button>
          `;

    alertContent.appendChild(buttonsDiv);

    window.handleConfirm = (result) => {
      closeCustomAlert();
      resolve(result);
      const buttons = document.querySelector(".alert-buttons");
      if (buttons) buttons.remove();
    };
  });
}


